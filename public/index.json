[{"categories":null,"contents":"Vue Router 簡介 定義元件： 在 views 資料夾新增一個元件（檔案名稱大寫.vue）\n定義路由： 在 router 資料夾的 index.js 檔案裡面定義\n加入對應連結： 在 App.vue 做設定\n巢狀路由 chidren: [ {}, {} ]\n一個元件插入多個視圖 - 具名視圖 透過參數決定路由內容 - 動態路由 product :id npm install axios https://randomuser.me/\n路由方法介紹 路由方法文件 路由屬性文件\n預設路徑以及重新導向 文件\n路由設定選項 路由選項文件\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-15/","tags":null,"title":"Vue Router"},{"categories":null,"contents":"元件介紹 為什麼要拆解成元件 增加程式碼的可複用性 避免單一檔案過大 易於管理及協作 元件功能獨立化 頁面元件結構 元件資料獨立與傳遞 資料傳遞方向：\nprops 把資料由外層轉向內層\n元件： 內層所有的 data 都必須用 function return\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-14/","tags":null,"title":"元件"},{"categories":["Vue"],"contents":"指令語法全介紹｜操作畫面超容易 指令觀念介紹 專有名詞 1. 指令 - Directives： 2. 修飾符 - Modifiers： 修飾符可以讓 v-model 更好運作 3. 縮寫 - Shorthands： 綁定內容於畫面上 v-text v-text、{{}} (Mustache) 純文字的渲染 雙向綁定的特色：在操作資料的時候，畫面也會跟著變化\nv-htm：渲染到畫面上的時候依然保有 HTML 的特色、使用這個方法需要確保資料是安全的 注意事項\nv-once 單次綁定，後面不需要加參數\nv-pre 讓文字不會被轉譯，可以顯示 {{}}\n多筆資料渲染 v-for 條件判斷 v-if 判斷 HTML 的節點是否呈現 v-show 只是把節點隱藏，v-if 則是把節點刪除\nHTML 屬性綁定 v-bind v-bind:綁定的屬性 = \u0026ldquo;值\u0026rdquo; 簡化 \u0026raquo; :綁定的屬性 = \u0026ldquo;值\u0026rdquo;\nHTML 樣式綁定 資料雙向綁定 v-model v-model 與表單 v-model 修飾符 v-model.lazy（HTML 的 change 事件） v-model.number（將輸入的文字轉為 number 型別） v-model.trim（移除使用者輸入的前後空白）\n事件觸發 v-on v-on 通常不太會直接跟 data 產生關係，大部分會直接來觸發 methods，透過這個 methods 來做更多事情\nv-on 修飾符 v-on DOM 事件處理技巧 ","permalink":"http://localhost:1313/skar5268/hugo/blog/post-13/","tags":["Photos","Game","HTML","Python","New"],"title":"指令語法全介紹｜操作畫面超容易"},{"categories":["Programming Language"],"contents":"傳統 關注點分離 關注點分離介紹 傳統麵條式語法 一個一個依序往下寫\n把外面的資料移到裡面來\ne.target.parentNode.remove()\n// 將外層資料移除\n資料抽離的概念 關注點分離：將資料和畫面的行為完全拆開來，先將資料抽出來，再調整畫面的部分\n先有資料才有畫面\n資料處理 / 畫面繪製\n「關注點分離」重點\n資料先定義出來\n畫面繪製與資料處理分開執行\n著重在資料處理的能力\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-12/","tags":["Game","HTML","Python","New"],"title":"關注點分離"},{"categories":["Go Language"],"contents":"\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-10/","tags":["Photos","Game","HTML","Python","New"],"title":"Promise 非同步觀念"},{"categories":["Go Language"],"contents":"\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-11/","tags":["Photos","Game","HTML","Python","New"],"title":"在瀏覽器上運行 ES 模組"},{"categories":["localStorage"],"contents":"什麼是 localStorage ？ 瀏覽器的資料庫\nlocalStorage儲存資料型態\nHTML 5 新增 localStorage 特性，主要是解決 cookie 儲存空間不足的問題( cookie 中每條 cookie 的儲存空間為 4k )，\n所以他只能存字串，再用 JSON.parse 轉為陣列讓 JS 去使用裡面的資料，所以裡面就算寫入數字、布林值等..\n他還是會轉成字串儲存在瀏覽器，如同下面這篇文章內文中 localStorage 的侷限第四點\nhttps://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/232745/\n「 localStorage 本質上是對字串的讀取，如果儲存內容多的話會消耗記憶體空間，會導致頁面變卡」\nsetItem、getItem 基本操作 設定一個內容\nlocalStorage.setItem(\u0026#34;myname\u0026#34;,str); 取出 item 的內容\nconsole.log(localStorage.getItem(\u0026#39;myname\u0026#39;)); setItem、getItem 基本操作 透過 JSON.parse、JSON.stringify 來編譯資料 因為 localStorage 只會保存 string 資料，如果要讀取陣列的資料需要使用 JSON：\n先將 array 轉成 string JSON.stringify() 要讀取資料時，將 string 轉成 array JSON.parse() 透過 JSON.parse、JSON.stringify 來編譯資料 data-* - 透過 dataset 讀取自訂資料 document.querySelector(\u0026#39;.list li\u0026#39;).dataset; document.querySelector(\u0026#39;.list li\u0026#39;).dataset.dog; data-* - 透過 dataset 讀取自訂資料 dataset、array 運用 dataset、array 運用\nsplice - 刪除 array 資料 ","permalink":"http://localhost:1313/skar5268/hugo/blog/post-7/","tags":["Photos","Game","HTML","Python","New"],"title":"localStorage - 瀏覽器資料儲存"},{"categories":["JavaScript"],"contents":"將內容（例如：座標、按鍵）記錄在 event 裡\nvar box; function init(){ //取得 id 為 \u0026#34;box\u0026#34; 物件，並且指定給 box 變數 box = document.getElementById(\u0026#34;box\u0026#34;); //將 onclick 註冊給 pickup\tbox.onclick = pickup; } //撿起來 function pickup(){ //設定滑鼠移動時， box 跟著移動 document.onmousemove = move; //將onclick註冊給putdown所以再次按下滑鼠的時候，就是放下\tbox.onclick = putdown; } box.onclick = pickup; 這裡呼叫函式不需要()括弧？\n當你在 JS 上要使用 onclick 時，不需要加上刮號，\n原因是 onclick 的語法只是要對應函式位置，當下還不用執行\n是等到有人觸發事件後，他自動就會執行該函式\n也就是說需要馬上執行的才需要加 ()\nonclick和click差別 (1) 關於 onclick\nMDN 的文件解釋：\nhttps://developer.mozilla.org/zh-TW/docs/Web/Guide/Events/Event_handlers\non-event 處理器為透過 DOM 元素的屬性，用來協助元素如何應對事件，例如：\n(a) 在元素上使用一個名稱為 on{eventtype} 的 HTML 標籤屬性（attribute）\n(b) 藉由設定相對應的 JavaScript 屬性（property）\ndocument.getElementById(\u0026ldquo;mybutton\u0026rdquo;).onclick = function(event) { \u0026hellip; }\n(2) 關於 click\nMDN 的文件解釋：\nhttps://developer.mozilla.org/zh-TW/docs/Web/API/HTMLElement/click\n當 click() 被使用在 DOM 元素（像是任一 元素），便會觸發該元素的點擊事件。\n事件會冒泡至 document tree（或 event chain）的上層元素，並觸發它們的點擊事件。\n例如：HTMLElement.click() 方法可以模擬滑鼠點擊一個元素。\n這邊做個總結：\n(效果) onclick 和 click() 效果一樣。\n(區別)\nonclick() 只是簡單調用按鈕 HTMLElement 的 onclick 方法，並未觸發事件。\nclick() 是真正地用程序去點擊按鈕，觸發按鈕的 onclick() 事件。\n綁定事件的語法差異 onclick 不能同時綁定兩個事件\nEvent Bubbling、Event Capturing 差異 elAdd.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;add-2\u0026#39;) },false) false（事件氣泡：event Bubbling）從指定元素往外層找 true （事件捕捉：event capturing）：從最外層找到指定元素 第三個參數預設是 false\nstopPropagation - 中止冒泡事件 DOM 的事件傳遞機制：捕獲與冒泡\npreventDefault - 取消預設觸發行為 e.preventDefault();\n取消元素的默認行為\n除了用在 a 連結外，也可以用在 submit 按鈕\nsubmit 按鈕：先透過 JS 去查詢表單有無錯誤，再 post 去傳送\npost 傳送\npost 是表單傳送的方法之一，\n也是 HTTP Method 的方法，\n概念為「將東西傳送出去」。\n往後的章節會陸續講解相關的知識。\nform表單中的get與post有什麼差別？\n宣告變數\nkeyCode - 點擊鍵盤，射發火箭！ var body = document.body; var body = document.querySelector(\u0026lsquo;body\u0026rsquo;);\nDocument 介面代表所有在瀏覽器中載入的網頁，\n也是作為網頁內容 DOM Tree（包含 、 與其它的元素）的進入點。\nDocument.body 主要是「回傳目前文件的 節點，如元素不存在則回傳 null」。因此只有 body 能使用。\nMDN 對 KeyboardEvent 的描述是「記錄著使用者和網頁之間透過鍵盤產生的互動事件」。\n因此會是觀察整個網頁的 DOM 節點，即 document.body；。\nblur - 離開焦點時進行事件觸發 滑鼠點擊時會產生 focus 事件\n離開焦點時就會觸發 blur 事件\nfocus：所在焦點\nblur：離開焦點\n網頁座標 - 了解 screen、page、client 箇中差異 screen：整個電腦的解析度\npage：網頁的寬高(整個頁面)\nclient：目前瀏覽器視窗的寬高(窗口)\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-6/","tags":["Photos","Game","HTML","Python","New"],"title":"Event"},{"categories":["JS"],"contents":"https://ithelp.ithome.com.tw/articles/10202689\nquerySelector 與 getElementById 的差異 (1) 相同點：選取 HTML 元素\n(2) 相異點\n(a) document.getElementById()：選取元素侷限於 id 元素，在網頁上 id 不能重複，只會有唯一一個。\n例如：var msg = document.getElementById(‘hi’);\n(b) document.querySelector()：選取元素包含 html標籤、id 元素、class 元素。\n例如：var msg = document.querySelector(#hi);\n若對 兩者的差異 想要更進一步了解，附上相關網址供你參考：https://ithelp.ithome.com.tw/articles/10211605\n插入 HTML 標籤的兩種方法\n在 HTML 世界哩，用的每一個網頁結構都算是一個節點\ntextContent 只是單純去新增文字的節點 innerHTML 增加 HTML 標籤在裡面。他會先將裡面全部清空，再賦予值進去\nquerySelectorAll 是為多項目設計的，因此使用時必須搭配for迴圈才能將值帶入\n這邊補充說明 document.querySelector() 和 document.querySelectorAll() 的差異性：\n(a) 關於 document.querySelector()\ndocument.querySelector() 只會回傳 document 選到的第一個 class 元素，\n因此搭配 innerHTML 的寫法如下：\n// HTML 部份 \u0026lt;ul class=\u0026#39;list\u0026#39;\u0026gt; \u0026lt;li\u0026gt; 我是第一個 li 標籤 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; 我是第二個 li 標籤 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; // JS 部份 var list = document.querySelector(\u0026#39;.list li\u0026#39;); list.innerHTML = \u0026#39;\u0026lt;li\u0026gt;被替換了\u0026lt;/li\u0026gt;\u0026#39;; (b) 關於 document.querySelectorAll()\n假如是選取 \u0026rsquo;list\u0026rsquo; class 名稱內所有的 li 元素，\n搭配 innerHTML 的寫法如下：\n// JS 部份 // 選取 \u0026#39;list\u0026#39; class 名稱內所有的 li 元素 var list = document.querySelectorAll(\u0026#39;.list li\u0026#39;); // 替換 \u0026#39;list\u0026#39; class 名稱內所有的 li 元素的內容 for (var i = 0; i \u0026lt; list.length; i++) { list[i].innerHTML = \u0026#39;\u0026lt;li\u0026gt;被替換了\u0026lt;/li\u0026gt;\u0026#39;; } JavaScript String (字串) createElement 新增元素 appendChild 增加子節點，會動態加在後面(跟 innerHTML 不同)\ninnerHTML 有資安疑慮，如果取得的資料是由使用者填寫送出的，則有可能被塞惡意程式。因此若要使用 innerHTML，需要用可以信任的資料來去渲染出來。 表單輸入盡量不要用 innerHTML\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-3/","tags":["Photos","Game","React","Python","New"],"title":"DOM"},{"categories":["JS"],"contents":"\nfor(var 初始狀態;條件;更新內容)\nfor(var i=0;i\u0026lt;10;i++){}\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-2/","tags":["Photos","Game","React","Python","New"],"title":"for 迴圈"},{"categories":["JavaScript"],"contents":"變數 變數簡介 變數常見資料型別 數字、字串、布林（true、false） 變數裡面是空的，沒有任何值，預設就會是 undefined 撈文字裡面的內容 用 value typeof 查詢字串還是數字還是函式等 parseInt 函式 定義 函數：是一個任務會幫你執行裡面的算式\n函式寫法：宣告函式 函式名稱\nfunction greet(){ alert(\u0026#39;歡迎光臨！\u0026#39;); alert(\u0026#39;請問你要點些什麼？\u0026#39;) } 執行函數\ngreet(); 呼叫它後才會執行裡面的內容\n函式名稱後面要括號()\n之前講到變數 有提到 var box = 10 會出現undefined的原因\nvar box;\nbox = 10\n分成兩步驟\n問答區 1. 為什麼執行函式的下一行會出現 undefined？\n該值表示回傳的結果～\n在 Chrome Devtool 執行一個命令都類似執行一個函式，\n而這個函式由於沒有 return 任何值，所以會回傳 undefined\n程式碼載入 JavaScript 以後\n他會自動把 function 放在最上面執行，也就是優先處理 function\n所以你不管放在哪裡的話\nfunction 都會放在最上面去做執行\n2. JavaScript裡的語句用分號結尾是個選項嗎\n建議在寫程式碼最後結尾養成寫分號的習慣\n主要是分號是代表語句分隔的意思\n最常見的是在用 var 宣告變數後加上分號\n如 var a = 1;\n如果沒加上分號，下方程式碼會不了解後方的 kk 是否為 str 的內容\n\u0026gt; var str = {'name': 'tom'} var kk = 3;\n詳細可參考這篇文章\n宣告在函數裡的變數，只存在於函數裡\n函式帶參數\nfunction count(oneNum){\nvar total = oneNum *10;\nconsole.log(\u0026lsquo;總數等於：\u0026rsquo; + total);\n}\ncount(10)\n運算到小數點的方法：\n小數點可以使用 toFixed 讓它顯示後面幾位的內容\ndocument.getElementById(\u0026rsquo;totalId\u0026rsquo;).textContent = total.toFixed(2); // 112.47\n參數其實就是我們會帶入 function 的變數，在呼叫時候，把裡面的值傳遞到 function 裡面去執行，與一般變數不同，不用 var 去宣告他\nfunction 有 hoisting 觀念，它會自動把 function 放在最上面\n在JavaScript中undefined和not defined是不一樣的，undefined其實是一個值，not defined則是沒有定義過這個變項。\nhttps://pjchender.blogspot.com/2015/12/javascript-hoisting.html\n如果在 var 的變數前加入 console.log()，這個時候並不會出錯，則是會跳出 undefined，這表示這個變數在記憶體中已經有一個位置，只不過目前並沒有值。\nhttps://wcc723.github.io/javascript/2017/12/16/javascript-hoisting/\nJavaScript 是屬於單執行緒的程式語言\n程式碼遇錯後則會中斷不再繼續執行\nj若遇到未被定義的變數，則此錯誤造成後續程式碼不再執行\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-5/","tags":["Photos","HTML","Python","New"],"title":"JavaScript"},{"categories":["JS"],"contents":"一、比較運算子 等於：== 會自動幫你轉型 ex.1 == '1' 為 true ===為嚴謹模式\n不等於：!==\n布林：true false\n一個等於，是賦予值的意思，而兩個等於則是內容進行比較\nJavascript 進階 3-7 寬鬆相等、嚴格相等以及隱含轉型\nhttps://ithelp.ithome.com.tw/articles/10229398\n運算子 == 的資料格式轉換 (type conversion) 問題\n規則說明：\nhttps://es5.github.io/#x11.9.3\n二、邏輯運算值 And：\u0026amp;\u0026amp;\nOR：||\nNOT：!\nif - 簡報介紹\nswitch - 簡報介紹\nif 在瀏覽器編譯時，會全部看過一次，所以在編譯的速度和效能上比較不好\nswitch 只會看哪一個 case 符合，在去跑裡面的程式碼，但 switch 最好裡面有很多條件時再使用\n「當是一個範圍的時候, ex 介於某區間 大於小於多少 \u0026mdash;\u0026gt;用 if else」\n「當是一個特定的明確 case 做比對時 \u0026mdash;\u0026gt;用 switch 」\nif/else if ：會審視所有條件，若有符合條件才會執行大括號裡面的內容。 switch ：不會審視所有條件是否符合，而是會根據一開始所給的變數狀態，直接跳到符合條件那行，再去執行程式內容。\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-4/","tags":["Photos","Game","HTML","Python","New"],"title":"控制判斷"},{"categories":["JS"],"contents":"讓程式以變數幫我們紀錄資訊\n宣告變數的方法：let、const、var\n基本型別介紹：\n如何宣告變數 let 變數名稱 = value\n宣告一個變數，變數名稱為 a，並賦予值為 1\nlet a = 1\n瀏覽頁面會有自己的記憶體空間，JS 不會跨頁面，重新整理也會清除資料（頁面的記憶體被清空）\ntypeof 確認資料型別\nlet 宣告的變數可以被修改\nconst 較難修改 / 無法被修改 var 比較不嚴謹\n變數命名：\n變數名稱開頭不能是數字\n有區分大小寫\n","permalink":"http://localhost:1313/skar5268/hugo/blog/post-1/","tags":["變數"],"title":"變數與資料型別"},{"categories":["Go Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image Youtube video ","permalink":"http://localhost:1313/skar5268/hugo/blog/post-8/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":["Python"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image Youtube video ","permalink":"http://localhost:1313/skar5268/hugo/blog/post-9/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"}]